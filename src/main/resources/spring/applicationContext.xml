<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/task   
		http://www.springframework.org/schema/task/spring-task-3.2.xsd
		http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

	<!-- 定义受环境影响易变的变量 -->
	<!-- 目前只加载database.properties, log4j.properties -->
	<context:property-placeholder location="classpath*:*.properties" />

	<context:component-scan base-package="com.panhainan">
		<!-- 将Controller的注解排除掉，在spring-mvc.xml单独扫描Controller注解 -->
		<context:exclude-filter expression="org.springframework.stereotype.Controller" type="annotation" />
	</context:component-scan>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<aop:aspectj-autoproxy />


	<!-- ==================================MyBatis start================================== -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
    <!-- mybatis 集成配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations">
            <list>
                <value>classpath*:mybatis/*Mapper.xml</value>
            </list>
        </property>
    </bean>
    <!-- 该方式用来注入dao接口 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.panhainan.dao" />
    </bean>
	<!-- ==================================MyBatis end================================== -->

	<!-- data source -->
    <!--设置为close使Spring容器关闭同时数据源能够正常关闭，以免造成连接泄露  -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 driverClassName，url、username、password -->
        <!-- 驱动类名 -->
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <!-- url -->
		<property name="url" value="${jdbc.url}" />
        <!-- 用户名 -->
		<property name="username" value="${jdbc.username}" />
        <!-- 用户密码 -->
		<property name="password" value="${jdbc.password}" />
        <!-- 设置为只读状态，配置读写分离时，读库可以设置为true -->
        <property name="defaultReadOnly" value="${jdbc.defaultReadOnly}" />
        <!-- 在连接池创建后，会初始化并维护一定数量的数据库安连接，当请求过多时，数据库会动态增加连接数，
        当请求过少时，连接池会减少连接数至一个最小空闲值 -->
        <!-- 在启动连接池初始创建的数据库连接，默认为0 -->
        <property name="initialSize" value="${jdbc.initialSize}" />
        <!-- 设置数据库同一时间的最大活跃连接默认为8，负数表示不闲置 -->
        <property name="maxActive" value="${jdbc.maxActive}" />
        <!-- 在连接池空闲时的最大连接数，超过的会被释放，默认为8，负数表示不闲置 -->
        <property name="maxIdle" value="${jdbc.maxIdle}"/>
        <!-- 空闲时的最小连接数，低于这个数量会创建新连接，默认为0 -->
        <property name="minIdle" value="${jdbc.minIdle}" />
        <!-- 连接被用完时等待归还的最大等待时间，单位毫秒，超出时间抛异常，默认为无限等待 -->
        <property name="maxWait" value="${jdbc.maxWait}" />
	</bean>
</beans>